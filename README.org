* NGender Emacs Configuration Directory

This Directory Tree is a Git Repository.

** The Purpose of this Repository

Much of the power of [[https://www.gnu.org/software/emacs][Emacs]] is do to its extraordinary
customizability through settings and extentions.  Many of
the most powerful extensions (typically available
from Emacs Package Archives) are themselves highly
configurable.  Many of the extensions are also designed to
be combined and/or layered.

We would like to make configuring and extending Emacs easier
for Users, especially Power Users and especially Power Users
who are willing to do simple editing of configuration files.

We would *also* like to make it easier for these Power Users
to share what they have done with other members of their
Shared Projects, Groups and with the Emacs Community at
large.

We designed this repository to make
Customizing Emacs more convenient by
- adding additional package archives
- adding and configuring desirable extra packages
- setting variables to further customize Emacs features
- defining additional functions and variables
- adding keymaps for invoking functions more conveniently

We intend that the customizations in this
repository can be
- shared by many people
- improved by many users for the benefit of all
- independent of any individual users' tastes
- easily configured to each user's taste!

This is a project of *RPTUG*, the
- Radical Productivity Tools Users Group
- [[https://ngender.org/tiki-index.php?page=RPTUG+Creation+Project]]

It is expected to work well
- on any account
- on any operating system supporting Emacs
- with any up-to-date Emacs

** Layout of the Repository

- ~/.emacs :: gets a few things started, rarely needs changing
- ~/.emacs.d/ :: holds main Emacs Configuration
- ~/.emacs.d/init.el :: sets load-path, loads two files, rarely needs changing
- ~/.emacs.d/custom-file.el :: Emacs Customization System settings
- ~/.emacs.d/NGender/ :: files shared with Emacs Community, on Emacs ~load-path~
- ~/.emacs.d/NGender/ngender.el :: core extension loaded by ~init.el~ file
- ~/.emacs.d/NGender/ngender-NAME.el :: file managing extension NAMD
- ~/.emacs.d/User-Me/ :: individual extensions, on Emacs ~load-path~
- ~/.emacs.d/User-Me/init-me.el :: loaded by ~init.el~ after ~ngender.el~
- ~/.emacs.d/Group-NAME/ :: extensions shared with given group/project, on ~load-path~
- ~/.emacs.d/init-examples.el :: snippets to copy/paste into ~init-me.el~ file


** Installing This Repository

1. Clone or otherwise download this repository into a convenient location on your filesystem, say ~Emacs-Config~
2. You will need a modern Emacs installed, version 25 or later
3. Find your existing Emacs Customizations, e.g.
	- the file ~.emacs~
	- the directory ~.emacs.d/~
4. Create a directory under ~Emacs-Config~ for your things, say ~User-Me/~
	- note that ~.gitignore~ tells git to anything with prefix ~User-~ or ~Group-~
5. Move your existing emacs Customizations to ~User-Me/~
6. Create links (shortcuts) to the new customization files
	- link ~Emacs-Config/.emacs~ to where you had your ~.emacs~
	- link ~Emacs-Config/.emacs.d/~ to where you had your ~.emacs.d/~
7. Copy ~Emacs-Config/.init-sample.el~ to ~Emacs-Config/.init.el~
	- this may already have been done
8. Edit your ~Emacs-Config/.init.el~ as described in its comments
9. Create an empty file named ~init-me.el~ under your ~User-Me~ directory
10. Check that Emacs is happy with this new configuration
11. Fix any problems - let us know with an issue?
12. Byte-Compile the files in the NGender/ subdirectory
13. Transfer any old configurations you like to the new places
	- if you have a lot, do this a small amount at a time
	- personal things should go in ~init-me.el~
	- consider putting fancy things in separate files
14. Improve things as long as you use Emacs
	- read ~README.org~ and other files under NGender/
	- study ~init-examples.el~ for ideas
	- submit a pull request with your improvements
	- especially for things you've done under NGender/

If you're on a Linux, Unix or BSD system
you can do this from your
shell with something like this:
#+BEGIN_SRC shell
which emacs # this needs to find your emacs program
emacs --version # this needs to be version 25 or higher
cd ~/Gits # where you want to keep this repository, and maybe others?
git clone https://github.com/GregDavidson/EmacsProfile.git
cd EmacsProfile # the directory you just cloned
mkdir User-Me # Keep prefix "User-", keep or change "Me" as you like
mv ~/.emacs User-Me
mv ~/.emacs.d User-Me
ln -s `pwd`/.emacs `pwd`/.emacs.d  ~
# some shells, e.g. bash, let you use ~+ instead of `pwd`
cp -i init-sample.el init.el
# if you changed User-Me, change it in init.el
touch User-Me
# Check that Emacs starts up OK:
emacs --debug-init
# If emacs didn't like things, fix them somehow!
# Once emacs is happy with this vanilla-flavored configuration:
# C-u 0 M-x byte-recompile-directory Emacs-Profile/NGender/
# Restart Emacs to make sure it's still happy
# Carefully (small amounts at a time?) transfer any of your old
# configurations, if any, from your old config files
#+END_SRC

Although Macintoshes are based on BSD they have a number of
deviations from the family.  You'll need to customize these
instructions appropriately.  Please consider submitting a
pull request with instructions for how to do that.

If you're installing this Emacs Profile under Microsoft
Windows and you're successful, please consider submitting a
pull request with instructions for how to do that.


** Current Status of this Project

This project is currently being evolved from a small number
of large customization files which have served the needs of
- JGD = J. Greg Davidson
by separating out logically cohesive customizations into
small files under the New Subdirectory
- ~/.emacs.d/NGender/
Any files which are specific to the needs and tastes of a
particular user should be put in sibling subdirectories.
Feel free to examine the files under
- ~/.emacs.d/JGD/
for examples.  These examples will soon migrate to
~init-examples.el~ and JGD will disappear from the public
repository.

** Individual vs. Group/Project vs. Community

*** Community Level

Everything under NGender is intended to be helpful for any
Emacs User.  Where a policy is applied there's a variable
which can alter it.
**** Individual Level

Everything under User-Me is ignored by the Repository.  To
manage this with Git, it can be created as a separate Git
repository, e.g. by doing:
#+BEGIN_SRC
cd ~/Gits  # wherever you keep your repositories
mv Emacs-Repository/User-Me Emacs-User-Me
cd Emacs-User-Me
git init
cp ~/Gits/Emacs-Repository/.gitignore .
# delete anything unwanted from .gitignore
cd ~/Gits/Emacs-Repository
ln -s ~/Gits/Emacs-User-Me User-Me
#+END_SRC

As improvements at this level are better understood, it may
be appropriate to move some of them to the NGender
repository and submit a pull request!

*** Project/Group Level

Customizations for Projects and Groups can be created as
separate repositories just as shown in the Individual Level
Above.  They can be linked in under Emacs-Repository as,
e.g. Group-NAME and activated by
- our .gitignore says to ignore files with prefix ~Group-~
- adding to your ~init.el~ or ~init-me.el~ file:
	- (ngender-group-subdirectory "Group-YOUR-GROUP-NAME")
- adding other customizations for them to ~init-me.el~ file

Host the Project/Group repository where other members of the
Project or Group can find it.  Ask the other members to
participate in the improvement of it.  Move anything which
is more generic than the Project or Group to the NGender
repository and submit a pull request!
		
** Current Challenges

*** Emacs Customization System Issues

The Emacs Customization System is the natural mechanism for
Emacs Users who are reluctant to use Emacs Lisp to make
their changes.

Should we use ~defcustom~ for the ~ngender-*~ module
variables?  We're currently not doing so because of
philosophical problems with the Emacs Customization System.

Problems with the Emacs Customization System
- It's difficult to browse changes vs. defaults
	- it does not play nicely with git
- It's difficult to know the purpose and scope of changes
	- no mechanism for tagging changes with
		- which project(s) needed it
		- which system or location needed it
		- the scope, i.e. individual/project,community
	- it doesn't capture comments or notes

Currently ~custom-file.el~ is going into the git repository
- handy for propagating all such to all one's accounts
- yet not everything there is appropriate everywhere

Ideally customizations settings would be moved to an
appropriate initialization file, documented and perhaps
controlled by some simple or sophisticated Emacs Lisp code.

*** Sql-Connect Issues

There are some host-specific parts of various files, e.g.
~NGender/ngender-sql-connect.el~

There is also the sensitive account and password parts of
such connections.

Some parts should be moved to Project Repositories.

Code should be added which stiches together the Individual
(account/password) and Project (database names, database
password?) parts.

Only the stiching code should be in the ~NGender/~
directory.  That code should also pull in the needed
packages and configure miscellaneous options nicely.

Needed: Easily customizable examples of how to write the
Project and Individual SQL files.

*** Automating Byte-Recompilation

How do I ensure that byte-recompilation happens automatically?

Let's add a function to ~ngender.el~ to call
~byte-recompile-directory~ with suitable options.

*** NGendering use of Emacs-Server

Let's add an ngender-emacs-server.el file which does
byte-recompiles and any other slow things and then starts
the Emacs Server.

** Rationale for the Curious

*** Configuration Files

When emacs starts up Emacs will look for a configuration
file in your Home Directory as specified by the environment
variable HOME.  Emacs understands any path beginning with
tilde slash (~/) starts from your Home Directory.

Emacs will take the first file it finds in the list
1. ~/.emacs
2. ~/.emacs.d/init.el
and load it, i.e. Emacs will treat the contents of that file
as Emacs-Lisp code (so it better be that) and Emacs will
execute that code.

Therefore, if you have *both* files, Emacs will, by default, ignore your
- ~/.emacs.d/
directory and everything in it!

It would seem that it's simpler to just not have a
- ~/.emacs
file but unfortunately that will interfere with
the Emacs Customization System.
